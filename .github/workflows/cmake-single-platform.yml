# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up LLVM repository and install Clang 18
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg lsb-release software-properties-common
        # Add the LLVM repository
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 18  # Installs clang-18
        sudo apt-get install -y clang-18

    - name: Install Ninja
      run: sudo apt-get install -y ninja-build
    
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: 
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G Ninja;
        status=$?;
        [ $status -eq 0 ] && echo "cmake_status=success" >> $GITHUB_ENV || echo "cmake_status=failure" >> $GITHUB_ENV

    - name: Build
      # Build your program with the given configuration
      run: 
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}};
        status=$?;
        [ $status -eq 0 ] && echo "cmake_status=success" >> $GITHUB_ENV || echo "cmake_status=failure" >> $GITHUB_ENV
      
    - name: Set Workflow Status
      id: set-status
      run: |
        if [ "${{ env.cmake_status }}" = "success" ]; then
          echo "workflow_status=success" >> $GITHUB_ENV
        else
          echo "workflow_status=failure" >> $GITHUB_ENV
        fi

    - name: Generate README Badges
      run: |
        # Set GitHub Actions Workflow Badge
        if [ "$workflow_status" = "success" ]; then
          workflow_badge="![Workflow](https://img.shields.io/badge/Workflow-passing-brightgreen?style=for-the-badge)"
        else
          workflow_badge="![Workflow](https://img.shields.io/badge/Workflow-failing-red?style=for-the-badge)"
        fi

        # Replace placeholder in README.md
        sed -i '/^!\[Workflow\]/c\ '"$workflow_badge" README.md
    
    - name: Display README contents (debugging)
      run: cat README.md
    
    - name: Commit changes
      run: |
        git config --local user.name "github-actions[bot]"
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git add README.md
        git commit -m "Update README with latest CMake build and workflow status"
        git push
      env:
        GITHUB_TOKEN: ${{ github.token }}
